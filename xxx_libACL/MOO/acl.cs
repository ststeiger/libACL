// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace acl
{



    public unsafe partial class AclExt
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::acl.AclExt> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::acl.AclExt>();

        protected bool __ownsNativeInstance;

        internal static global::acl.AclExt __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::acl.AclExt(native.ToPointer(), skipVTables);
        }

        internal static global::acl.AclExt __CreateInstance(global::acl.AclExt.__Internal native, bool skipVTables = false)
        {
            return new global::acl.AclExt(native, skipVTables);
        }

        private static void* __CopyValue(global::acl.AclExt.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::acl.AclExt.__Internal));
            *(global::acl.AclExt.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AclExt(global::acl.AclExt.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AclExt(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AclPermsetExt
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::acl.AclPermsetExt> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::acl.AclPermsetExt>();

        protected bool __ownsNativeInstance;

        internal static global::acl.AclPermsetExt __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::acl.AclPermsetExt(native.ToPointer(), skipVTables);
        }

        internal static global::acl.AclPermsetExt __CreateInstance(global::acl.AclPermsetExt.__Internal native, bool skipVTables = false)
        {
            return new global::acl.AclPermsetExt(native, skipVTables);
        }

        private static void* __CopyValue(global::acl.AclPermsetExt.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::acl.AclPermsetExt.__Internal));
            *(global::acl.AclPermsetExt.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AclPermsetExt(global::acl.AclPermsetExt.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AclPermsetExt(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class AclEntryExt
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::acl.AclEntryExt> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::acl.AclEntryExt>();

        protected bool __ownsNativeInstance;

        internal static global::acl.AclEntryExt __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::acl.AclEntryExt(native.ToPointer(), skipVTables);
        }

        internal static global::acl.AclEntryExt __CreateInstance(global::acl.AclEntryExt.__Internal native, bool skipVTables = false)
        {
            return new global::acl.AclEntryExt(native, skipVTables);
        }

        private static void* __CopyValue(global::acl.AclEntryExt.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::acl.AclEntryExt.__Internal));
            *(global::acl.AclEntryExt.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AclEntryExt(global::acl.AclEntryExt.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AclEntryExt(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class acl
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_init")]
            internal static extern global::System.IntPtr AclInit(int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_dup")]
            internal static extern global::System.IntPtr AclDup(global::System.IntPtr acl);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_free")]
            internal static extern int AclFree(global::System.IntPtr obj_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_valid")]
            internal static extern int AclValid(global::System.IntPtr acl);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_copy_entry")]
            internal static extern int AclCopyEntry(global::System.IntPtr dest_d, global::System.IntPtr src_d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_create_entry")]
            internal static extern int AclCreateEntry(global::System.IntPtr acl_p, global::System.IntPtr entry_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_delete_entry")]
            internal static extern int AclDeleteEntry(global::System.IntPtr acl, global::System.IntPtr entry_d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_get_entry")]
            internal static extern int AclGetEntry(global::System.IntPtr acl, int entry_id, global::System.IntPtr entry_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_add_perm")]
            internal static extern int AclAddPerm(global::System.IntPtr permset_d, uint perm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_calc_mask")]
            internal static extern int AclCalcMask(global::System.IntPtr acl_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_clear_perms")]
            internal static extern int AclClearPerms(global::System.IntPtr permset_d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_delete_perm")]
            internal static extern int AclDeletePerm(global::System.IntPtr permset_d, uint perm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_get_permset")]
            internal static extern int AclGetPermset(global::System.IntPtr entry_d, global::System.IntPtr permset_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_set_permset")]
            internal static extern int AclSetPermset(global::System.IntPtr entry_d, global::System.IntPtr permset_d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_get_qualifier")]
            internal static extern global::System.IntPtr AclGetQualifier(global::System.IntPtr entry_d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_get_tag_type")]
            internal static extern int AclGetTagType(global::System.IntPtr entry_d, int* tag_type_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_set_qualifier")]
            internal static extern int AclSetQualifier(global::System.IntPtr entry_d, global::System.IntPtr tag_qualifier_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_set_tag_type")]
            internal static extern int AclSetTagType(global::System.IntPtr entry_d, int tag_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_copy_ext")]
            internal static extern long AclCopyExt(global::System.IntPtr buf_p, global::System.IntPtr acl, long size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_copy_int")]
            internal static extern global::System.IntPtr AclCopyInt(global::System.IntPtr buf_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_from_text")]
            internal static extern global::System.IntPtr AclFromText([MarshalAs(UnmanagedType.LPUTF8Str)] string buf_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_size")]
            internal static extern long AclSize(global::System.IntPtr acl);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_to_text")]
            internal static extern sbyte* AclToText(global::System.IntPtr acl, long* len_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_delete_def_file")]
            internal static extern int AclDeleteDefFile([MarshalAs(UnmanagedType.LPUTF8Str)] string path_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_get_fd")]
            internal static extern global::System.IntPtr AclGetFd(int fd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_get_file")]
            internal static extern global::System.IntPtr AclGetFile([MarshalAs(UnmanagedType.LPUTF8Str)] string path_p, uint type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_set_fd")]
            internal static extern int AclSetFd(int fd, global::System.IntPtr acl);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_set_file")]
            internal static extern int AclSetFile([MarshalAs(UnmanagedType.LPUTF8Str)] string path_p, uint type, global::System.IntPtr acl);
        }

        public static global::acl.AclExt AclInit(int count)
        {
            var __ret = __Internal.AclInit(count);
            global::acl.AclExt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::acl.AclExt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::acl.AclExt) global::acl.AclExt.NativeToManagedMap[__ret];
            else __result0 = global::acl.AclExt.__CreateInstance(__ret);
            return __result0;
        }

        public static global::acl.AclExt AclDup(global::acl.AclExt acl)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclDup(__arg0);
            global::acl.AclExt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::acl.AclExt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::acl.AclExt) global::acl.AclExt.NativeToManagedMap[__ret];
            else __result0 = global::acl.AclExt.__CreateInstance(__ret);
            return __result0;
        }

        public static int AclFree(global::System.IntPtr obj_p)
        {
            var __ret = __Internal.AclFree(obj_p);
            return __ret;
        }

        public static int AclValid(global::acl.AclExt acl)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclValid(__arg0);
            return __ret;
        }

        public static int AclCopyEntry(global::acl.AclEntryExt dest_d, global::acl.AclEntryExt src_d)
        {
            var __arg0 = ReferenceEquals(dest_d, null) ? global::System.IntPtr.Zero : dest_d.__Instance;
            var __arg1 = ReferenceEquals(src_d, null) ? global::System.IntPtr.Zero : src_d.__Instance;
            var __ret = __Internal.AclCopyEntry(__arg0, __arg1);
            return __ret;
        }

        public static int AclCreateEntry(global::acl.AclExt acl_p, global::acl.AclEntryExt entry_p)
        {
            var ____arg0 = ReferenceEquals(acl_p, null) ? global::System.IntPtr.Zero : acl_p.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var ____arg1 = ReferenceEquals(entry_p, null) ? global::System.IntPtr.Zero : entry_p.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __ret = __Internal.AclCreateEntry(__arg0, __arg1);
            return __ret;
        }

        public static int AclDeleteEntry(global::acl.AclExt acl, global::acl.AclEntryExt entry_d)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __arg1 = ReferenceEquals(entry_d, null) ? global::System.IntPtr.Zero : entry_d.__Instance;
            var __ret = __Internal.AclDeleteEntry(__arg0, __arg1);
            return __ret;
        }

        public static int AclGetEntry(global::acl.AclExt acl, int entry_id, global::acl.AclEntryExt entry_p)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var ____arg2 = ReferenceEquals(entry_p, null) ? global::System.IntPtr.Zero : entry_p.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            var __ret = __Internal.AclGetEntry(__arg0, entry_id, __arg2);
            return __ret;
        }

        public static int AclAddPerm(global::acl.AclPermsetExt permset_d, uint perm)
        {
            var __arg0 = ReferenceEquals(permset_d, null) ? global::System.IntPtr.Zero : permset_d.__Instance;
            var __ret = __Internal.AclAddPerm(__arg0, perm);
            return __ret;
        }

        public static int AclCalcMask(global::acl.AclExt acl_p)
        {
            var ____arg0 = ReferenceEquals(acl_p, null) ? global::System.IntPtr.Zero : acl_p.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            var __ret = __Internal.AclCalcMask(__arg0);
            return __ret;
        }

        public static int AclClearPerms(global::acl.AclPermsetExt permset_d)
        {
            var __arg0 = ReferenceEquals(permset_d, null) ? global::System.IntPtr.Zero : permset_d.__Instance;
            var __ret = __Internal.AclClearPerms(__arg0);
            return __ret;
        }

        public static int AclDeletePerm(global::acl.AclPermsetExt permset_d, uint perm)
        {
            var __arg0 = ReferenceEquals(permset_d, null) ? global::System.IntPtr.Zero : permset_d.__Instance;
            var __ret = __Internal.AclDeletePerm(__arg0, perm);
            return __ret;
        }

        public static int AclGetPermset(global::acl.AclEntryExt entry_d, global::acl.AclPermsetExt permset_p)
        {
            var __arg0 = ReferenceEquals(entry_d, null) ? global::System.IntPtr.Zero : entry_d.__Instance;
            var ____arg1 = ReferenceEquals(permset_p, null) ? global::System.IntPtr.Zero : permset_p.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __ret = __Internal.AclGetPermset(__arg0, __arg1);
            return __ret;
        }

        public static int AclSetPermset(global::acl.AclEntryExt entry_d, global::acl.AclPermsetExt permset_d)
        {
            var __arg0 = ReferenceEquals(entry_d, null) ? global::System.IntPtr.Zero : entry_d.__Instance;
            var __arg1 = ReferenceEquals(permset_d, null) ? global::System.IntPtr.Zero : permset_d.__Instance;
            var __ret = __Internal.AclSetPermset(__arg0, __arg1);
            return __ret;
        }

        public static global::System.IntPtr AclGetQualifier(global::acl.AclEntryExt entry_d)
        {
            var __arg0 = ReferenceEquals(entry_d, null) ? global::System.IntPtr.Zero : entry_d.__Instance;
            var __ret = __Internal.AclGetQualifier(__arg0);
            return __ret;
        }

        public static int AclGetTagType(global::acl.AclEntryExt entry_d, ref int tag_type_p)
        {
            var __arg0 = ReferenceEquals(entry_d, null) ? global::System.IntPtr.Zero : entry_d.__Instance;
            fixed (int* __tag_type_p1 = &tag_type_p)
            {
                var __arg1 = __tag_type_p1;
                var __ret = __Internal.AclGetTagType(__arg0, __arg1);
                return __ret;
            }
        }

        public static int AclSetQualifier(global::acl.AclEntryExt entry_d, global::System.IntPtr tag_qualifier_p)
        {
            var __arg0 = ReferenceEquals(entry_d, null) ? global::System.IntPtr.Zero : entry_d.__Instance;
            var __ret = __Internal.AclSetQualifier(__arg0, tag_qualifier_p);
            return __ret;
        }

        public static int AclSetTagType(global::acl.AclEntryExt entry_d, int tag_type)
        {
            var __arg0 = ReferenceEquals(entry_d, null) ? global::System.IntPtr.Zero : entry_d.__Instance;
            var __ret = __Internal.AclSetTagType(__arg0, tag_type);
            return __ret;
        }

        public static long AclCopyExt(global::System.IntPtr buf_p, global::acl.AclExt acl, long size)
        {
            var __arg1 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclCopyExt(buf_p, __arg1, size);
            return __ret;
        }

        public static global::acl.AclExt AclCopyInt(global::System.IntPtr buf_p)
        {
            var __ret = __Internal.AclCopyInt(buf_p);
            global::acl.AclExt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::acl.AclExt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::acl.AclExt) global::acl.AclExt.NativeToManagedMap[__ret];
            else __result0 = global::acl.AclExt.__CreateInstance(__ret);
            return __result0;
        }

        public static global::acl.AclExt AclFromText(string buf_p)
        {
            var __ret = __Internal.AclFromText(buf_p);
            global::acl.AclExt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::acl.AclExt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::acl.AclExt) global::acl.AclExt.NativeToManagedMap[__ret];
            else __result0 = global::acl.AclExt.__CreateInstance(__ret);
            return __result0;
        }

        public static long AclSize(global::acl.AclExt acl)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclSize(__arg0);
            return __ret;
        }

        public static sbyte* AclToText(global::acl.AclExt acl, ref long len_p)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            fixed (long* __len_p1 = &len_p)
            {
                var __arg1 = __len_p1;
                var __ret = __Internal.AclToText(__arg0, __arg1);
                return __ret;
            }
        }

        public static int AclDeleteDefFile(string path_p)
        {
            var __ret = __Internal.AclDeleteDefFile(path_p);
            return __ret;
        }

        public static global::acl.AclExt AclGetFd(int fd)
        {
            var __ret = __Internal.AclGetFd(fd);
            global::acl.AclExt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::acl.AclExt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::acl.AclExt) global::acl.AclExt.NativeToManagedMap[__ret];
            else __result0 = global::acl.AclExt.__CreateInstance(__ret);
            return __result0;
        }

        public static global::acl.AclExt AclGetFile(string path_p, uint type)
        {
            var __ret = __Internal.AclGetFile(path_p, type);
            global::acl.AclExt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::acl.AclExt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::acl.AclExt) global::acl.AclExt.NativeToManagedMap[__ret];
            else __result0 = global::acl.AclExt.__CreateInstance(__ret);
            return __result0;
        }

        public static int AclSetFd(int fd, global::acl.AclExt acl)
        {
            var __arg1 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclSetFd(fd, __arg1);
            return __ret;
        }

        public static int AclSetFile(string path_p, uint type, AclExt acl)
        {
            var __arg2 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclSetFile(path_p, type, __arg2);
            return __ret;
        }
    }
}
