// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace acl
{
    public unsafe partial class libacl
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint="acl_to_any_text")]
            internal static extern sbyte* AclToAnyText(global::System.IntPtr acl, [MarshalAs(UnmanagedType.LPUTF8Str)] string prefix, sbyte separator, int options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_cmp")]
            internal static extern int AclCmp(global::System.IntPtr acl1, global::System.IntPtr acl2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_check")]
            internal static extern int AclCheck(global::System.IntPtr acl, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_from_mode")]
            internal static extern global::System.IntPtr AclFromMode(uint mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_equiv_mode")]
            internal static extern int AclEquivMode(global::System.IntPtr acl, uint* mode_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_extended_file")]
            internal static extern int AclExtendedFile([MarshalAs(UnmanagedType.LPUTF8Str)] string path_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_extended_file_nofollow")]
            internal static extern int AclExtendedFileNofollow([MarshalAs(UnmanagedType.LPUTF8Str)] string path_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_extended_fd")]
            internal static extern int AclExtendedFd(int fd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_entries")]
            internal static extern int AclEntries(global::System.IntPtr acl);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="acl_error")]
            internal static extern global::System.IntPtr AclError(int code);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint="acl_get_perm")]
            internal static extern int AclGetPerm(global::System.IntPtr permset_d, uint perm);
            
            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint="acl_get_perm_np")]
            internal static extern int AclGetPermNP(global::System.IntPtr permset_d, uint perm);
            
            

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="perm_copy_file")]
            internal static extern int PermCopyFile([MarshalAs(UnmanagedType.LPUTF8Str)] string _0, [MarshalAs(UnmanagedType.LPUTF8Str)] string _1, global::System.IntPtr _2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("acl", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="perm_copy_fd")]
            internal static extern int PermCopyFd([MarshalAs(UnmanagedType.LPUTF8Str)] string _0, int _1, [MarshalAs(UnmanagedType.LPUTF8Str)] string _2, int _3, global::System.IntPtr _4);
        }

        public static sbyte* AclToAnyText(global::acl.AclExt acl, string prefix, sbyte separator, int options)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclToAnyText(__arg0, prefix, separator, options);
            return __ret;
        }

        public static int AclCmp(global::acl.AclExt acl1, global::acl.AclExt acl2)
        {
            var __arg0 = ReferenceEquals(acl1, null) ? global::System.IntPtr.Zero : acl1.__Instance;
            var __arg1 = ReferenceEquals(acl2, null) ? global::System.IntPtr.Zero : acl2.__Instance;
            var __ret = __Internal.AclCmp(__arg0, __arg1);
            return __ret;
        }

        public static int AclCheck(global::acl.AclExt acl, ref int last)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            fixed (int* __last1 = &last)
            {
                var __arg1 = __last1;
                var __ret = __Internal.AclCheck(__arg0, __arg1);
                return __ret;
            }
        }

        public static global::acl.AclExt AclFromMode(uint mode)
        {
            var __ret = __Internal.AclFromMode(mode);
            global::acl.AclExt __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::acl.AclExt.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::acl.AclExt) global::acl.AclExt.NativeToManagedMap[__ret];
            else __result0 = global::acl.AclExt.__CreateInstance(__ret);
            return __result0;
        }

        public static int AclEquivMode(global::acl.AclExt acl, ref uint mode_p)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            fixed (uint* __mode_p1 = &mode_p)
            {
                var __arg1 = __mode_p1;
                var __ret = __Internal.AclEquivMode(__arg0, __arg1);
                return __ret;
            }
        }

        public static int AclExtendedFile(string path_p)
        {
            var __ret = __Internal.AclExtendedFile(path_p);
            return __ret;
        }

        public static int AclExtendedFileNofollow(string path_p)
        {
            var __ret = __Internal.AclExtendedFileNofollow(path_p);
            return __ret;
        }

        public static int AclExtendedFd(int fd)
        {
            var __ret = __Internal.AclExtendedFd(fd);
            return __ret;
        }

        public static int AclEntries(global::acl.AclExt acl)
        {
            var __arg0 = ReferenceEquals(acl, null) ? global::System.IntPtr.Zero : acl.__Instance;
            var __ret = __Internal.AclEntries(__arg0);
            return __ret;
        }

        public static string AclError(int code)
        {
            var __ret = __Internal.AclError(code);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int AclGetPerm(global::acl.AclPermsetExt permset_d, uint perm)
        {
            var __arg0 = ReferenceEquals(permset_d, null) ? global::System.IntPtr.Zero : permset_d.__Instance;
            var __ret = __Internal.AclGetPerm(__arg0, perm);
            return __ret;
        }
        
        public static int AclGetPermNP(global::acl.AclPermsetExt permset_d, uint perm)
        {
            var __arg0 = ReferenceEquals(permset_d, null) ? global::System.IntPtr.Zero : permset_d.__Instance;
            var __ret = __Internal.AclGetPermNP(__arg0, perm);
            return __ret;
        }

        public static AclExt AclFromText(string buf_p)
        {
            return null;
        }

        public static int ACL_GET_PERM(global::acl.AclPermsetExt permset_d, uint perm)
        {
            try
            {
                return AclGetPerm(permset_d, perm);
            }
            catch (System.Exception)
            { }
            
            return AclGetPermNP(permset_d, perm);
        }

        
        
        
        
        
        public static int PermCopyFile(string _0, string _1, global::acl.ErrorContext _2)
        {
            var __arg2 = ReferenceEquals(_2, null) ? global::System.IntPtr.Zero : _2.__Instance;
            var __ret = __Internal.PermCopyFile(_0, _1, __arg2);
            return __ret;
        }

        public static int PermCopyFd(string _0, int _1, string _2, int _3, global::acl.ErrorContext _4)
        {
            var __arg4 = ReferenceEquals(_4, null) ? global::System.IntPtr.Zero : _4.__Instance;
            var __ret = __Internal.PermCopyFd(_0, _1, _2, _3, __arg4);
            return __ret;
        }
    }
    
    
}